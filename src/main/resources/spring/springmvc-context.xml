<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:task="http://www.springframework.org/schema/task"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:p="http://www.springframework.org/schema/p" xmlns:mvc="http://www.springframework.org/schema/mvc"
	   xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/task
        http://www.springframework.org/schema/task/spring-task.xsd">

	<!-- 拦截器 -->
	<!-- 匹配的是url路径， 如果不配置或/**,将拦截所有的Controller -->
	<!-- 当设置多个拦截器时，先按顺序调用preHandle方法，然后逆序调用每个拦截器的postHandle和afterCompletion方法 -->
	<!-- <mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/**" />
			<bean class="com.kalamodo.outplan.controller.InterceptController"></bean>
		</mvc:interceptor>
	</mvc:interceptors> -->

	<!-- 启用注解功能 -->
	<context:annotation-config />

	<!-- 字符串字符编码转换 -->
	<bean
			class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<bean
						class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
					<property name="supportedMediaTypes">
						<list>
							<value>application/json;charset=UTF-8</value>
						</list>
					</property>
				</bean>
			</list>
		</property>
	</bean>

	<context:component-scan base-package="com.kalamodo.*"
							use-default-filters="false">
		<!-- <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service"/> -->
		<context:include-filter type="annotation"
								expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<!-- <bean id="freemarkerConfig" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
		<property name="templateLoaderPath" value="/WEB-INF/ftl/" /> <property name="freemarkerSettings">
		<props> <prop key="defaultEncoding">UTF-8</prop> <prop key="template_update_delay">0</prop>
		<prop key="default_encoding">UTF-8</prop> <prop key="number_format">0.##########</prop>
		<prop key="datetime_format">yyyy-MM-dd HH:mm:ss</prop> <prop key="classic_compatible">true</prop>
		<prop key="template_exception_handler">ignore</prop> </props> </property>
		</bean> <bean class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver"
		p:prefix="/" p:suffix=".ftl"> <property name="cache" value="false" /> <property
		name="viewClass" value="org.springframework.web.servlet.view.freemarker.FreeMarkerView"
		/> <property name="contentType" value="text/html;charset=UTF-8"></property>
		<property name="exposeRequestAttributes" value="true" /> <property name="exposeSessionAttributes"
		value="true" /> <property name="exposeSpringMacroHelpers" value="true" />
		<property name="requestContextAttribute" value="base"></property> <property
		name="order" value="0"></property> </bean> -->

	<bean
			class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass"
				  value="org.springframework.web.servlet.view.JstlView"></property>
		<property name="prefix" value=""></property>
		<property name="suffix" value=".html"></property>
	</bean>

	<bean id="exceptionResolver"
		  class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings">
			<props>
			</props>
		</property>
	</bean>

	<bean id="multipartResolver" class="com.kalamodo.outplan.utils.KOCommonsMultipartResolver"
		  p:defaultEncoding="UTF-8">
		<property name="maxUploadSize" value="20971520" />
		<property name="resolveLazily" value="true" />
	</bean>

	<!-- 定时任务 -->
	<task:annotation-driven scheduler="myTask" mode="proxy"/>
	<task:scheduler id="myTask" pool-size="10"/>

	<!-- 校验器 -->
	<bean id="validator"
		  class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
		<!-- hibernate校验器-->
		<property name="providerClass" value="org.hibernate.validator.HibernateValidator" />
		<!-- 指定校验使用的资源文件，在文件中配置校验错误信息，如果不指定则默认使用classpath下的ValidationMessages.properties -->
		<property name="validationMessageSource" ref="messageSource" />
	</bean>
	<!-- 校验错误信息配置文件 -->
	<bean id="messageSource"
		  class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<!-- 资源文件名-->
		<property name="basenames">
			<list>
				<value>classpath:CustomValidationMessages</value>
			</list>
		</property>
		<!-- 资源文件编码格式 -->
		<property name="fileEncodings" value="utf-8" />
		<!-- 对资源文件内容缓存时间，单位秒 -->
		<property name="cacheSeconds" value="120" />
	</bean>

	<bean id="conversionService" class="org.springframework.context.support.ConversionServiceFactoryBean">
	</bean>

	<mvc:annotation-driven conversion-service="conversionService"
						   validator="validator">
	</mvc:annotation-driven>

</beans>
